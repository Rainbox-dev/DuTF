/*
	Dutranslator

	Copyright (c) 2017 Nicolas Dufresne, Rainbox Productions

  Internationalization Framework for all kinds of scripts and applications.
  This is the Adobe ExtendScript library to translate scripts at runtime.
  https://rainboxprod.coop

	__Contributors:__

		Nicolas Dufresne - Lead developer
		Kevin Masson - Developer

	__Translations:__

	__Thanks to:__

	__Dutranslator makes use of:__

		• json2
		See http://www.JSON.org/js.html
		Public Domain

	This file is part of Dutranslator.

		Dutranslator is free software: you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.

		Dutranslator is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with Dutranslator. If not, see <http://www.gnu.org/licenses/>.

*/

/*JSON PARSER
json2
See http://www.JSON.org/js.html
Public Domain
*/
{
  if(typeof JSON!=="object"){JSON={};}
  (function(){"use strict";var rx_one=/^[\],:{}\s]*$/;var rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rx_three=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rx_four=/(?:^|:|,)(?:\s*\[)+/g;var rx_escapable=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;var rx_dangerous=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;function f(n){return n<10?"0"+n:n;}
  function this_value(){return this.valueOf();}
  if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+
  f(this.getUTCMonth()+1)+"-"+
  f(this.getUTCDate())+"T"+
  f(this.getUTCHours())+":"+
  f(this.getUTCMinutes())+":"+
  f(this.getUTCSeconds())+"Z":null;};Boolean.prototype.toJSON=this_value;Number.prototype.toJSON=this_value;String.prototype.toJSON=this_value;}
  var gap;var indent;var meta;var rep;function quote(string){rx_escapable.lastIndex=0;return rx_escapable.test(string)?"\""+string.replace(rx_escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);})+"\"":"\""+string+"\"";}
  function str(key,holder){var i;var k;var v;var length;var mind=gap;var partial;var value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key);}
  if(typeof rep==="function"){value=rep.call(holder,key,value);}
  switch(typeof value){case"string":return quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null";}
  gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||"null";}
  v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v;}
  if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){if(typeof rep[i]==="string"){k=rep[i];v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}
  v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v;}}
  if(typeof JSON.stringify!=="function"){meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r","\"":"\\\"","\\":"\\\\"};JSON.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" ";}}else if(typeof space==="string"){indent=space;}
  rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify");}
  return str("",{"":value});};}
  if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k;var v;var value=holder[key];if(value&&typeof value==="object"){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}
  return reviver.call(holder,key,value);}
  text=String(text);rx_dangerous.lastIndex=0;if(rx_dangerous.test(text)){text=text.replace(rx_dangerous,function(a){return"\\u"+
  ("0000"+a.charCodeAt(0).toString(16)).slice(-4);});}
  if(rx_one.test(text.replace(rx_two,"@").replace(rx_three,"]").replace(rx_four,""))){j=eval("("+text+")");return(typeof reviver==="function")?walk({"":j},""):j;}
  throw new SyntaxError("JSON.parse");};}}());
}

/**
 * The Javascript translator part of the Dutranslator Framework
 * @class Dutranslator
 */
var Dutranslator = {};

/**
 * The current language id (fr, en, ..)
 * @memberof Dutranslator
 */
Dutranslator.current = '';

/**
 * A map containing available languages.
 * There is a language name and a file name for each language id.
 * languages["fr_FR"] ["name"] is "Francais" for example.
 *
 * Will be filled when executing Dutranslator.getAvailable().
 *
 * @memberof Dutranslator
 */
Dutranslator.languages = {};

/**
 * The translated strings  of the current language
 *
 * An array of compounds containing the source, the translation and the context
 *
 * @memberof Dutranslator
 */
Dutranslator.localizedStrings = [];

/**
 * Some settings for the translator
 * @class Settings
 * @memberof Dutranslator
 */
Dutranslator.settings = {}

/**
 * {string} The folder containing the translation files
 * Default: this translator path
 * @memberof Settings
 *
 */
Dutranslator.settings.folder = File($.fileName).path + "/";

/**
 * {string} The prefix in the translation filenames
 * Default: this translator filename + "_"
 * @memberof Settings
 */
Dutranslator.settings.prefix = File($.fileName).name.substring(0,File($.fileName).name.lastIndexOf('.')) + "_";

/**
 * {string} The suffix (including file extension) in the translation filenames
 * Default: ".json"
 * @memberof Settings
 */
Dutranslator.settings.suffix = ".json";

/**
 * {string} The application name (root of the json translations)
 * Default: "duik"
 * @memberof Settings
 */
Dutranslator.settings.name = "duik";

/**
 * The original languageId
 * @memberof Settings
 */
Dutranslator.settings.originalLanguageId = "en";

/**
 * The original language name
 * @memberof Settings
 */
Dutranslator.settings.originalLanguageName = "English";

/**
 * Load the list of available languages
 *
 * If the language id and or the language name can't be found in the file, the file name will be used 
 * to determine the language id and the name will be set as the id.
 *
 * @return A success code
 * 0    Success
 * 1    One of the file haven't been correctly opened
 */
Dutranslator.getAvailable = function ()
{
    Dutranslator.languages = {};
	//Add original language
    Dutranslator.languages[Dutranslator.settings.originalLanguageId] = {
        "name": Dutranslator.settings.originalLanguageName,
        "file": undefined
    };
        

    var folder = new Folder(Dutranslator.settings.folder);

	// Get the list of translations
	languageFiles = folder.getFiles(Dutranslator.settings.prefix + '*' + Dutranslator.settings.suffix);
	for (var i = 0 ; i < languageFiles.length ; i++)
	{
          var fileName = languageFiles[i].name;                   
          var langId = langName = "";
          
          // Determine the language name and the language id by reading the file
          // Values are stored at the top so it should be fase
          var file = new File(folder + "/" + fileName);
          if(!file.open("r")) return 1; // Unable to open the file
         
          // Line by line reading
          while(langName == "" || langId == "")
          {
              var line = file.readln();
              var indexName = line.lastIndexOf("languageName");
              var indexId = line.lastIndexOf("languageId");
              
              var index;
              if(indexName != -1 && langName == "") index = indexName;
              else if(indexId != -1 && langId == "") index = indexId;
              else continue;                                          
              // ..... "lang" : "value"
              line = line.substring(index, line.length);
              // .lang" : "value"
              line = line.substring(line.indexOf("\"") + 1, line.length);
              // : "value"
              line = line.substring(line.indexOf("\"") + 1, line.length);
              // value"
              line = line.substring(0, line.indexOf("\""));
              // value
               if(indexName != -1 && langName == "") langName = line ;
              else if(indexId != -1 && langId == "") langId = line ;
              else continue;              
          }
      
          file.close();
          
          
          if(langId == "") langId = fileName.replace(Dutranslator.settings.prefix, "").replace(Dutranslator.settings.suffix, "");
          if(langName == "") langName = langId;

          Dutranslator.languages[langId] = {
              "name": langName,
              "file":  Dutranslator.settings.folder + "/" + fileName
          };
          
	}
}

/**
  * Returns the pretty name of a given language
  * @param {string} langId - The id of the request language
 */
Dutranslator.getPrettyName = function(langId)
{
    if(!Dutranslator.languages[langId]) return 1;
    return Dutranslator.languages[langId]["name"];   
}

/**
  * Returns the language id of a given language name
  * @param {string} prettyName - The pretty name of the request language
 */
Dutranslator.getLanguageId= function(prettyName)
{
    for(var langId in Dutranslator.languages)
    {
        if(Dutranslator.languages[langId]["name"] == prettyName) return langId;
    }        
    return 1;    
}

/**
  * Returns a list containing pretty names of all languages
  * @param {string} langId - The id of the request language
 */
Dutranslator.getPrettyNames = function()
{
    var res = [];
    for(var langId in Dutranslator.languages)
    {
        res[res.length] = Dutranslator.languages[langId]["name"];
    }
    return res;    
}

/**
 * Set the current language
 * @param {string} languageId - The id of the language to set
 * @return success code
 * 0    Everything went ok
 * 1    The file linked to the given id can't be opened
 * 2    The json content doesn't match a translation file
 */
Dutranslator.setLanguage = function (languageId) {

	for (var langId in Dutranslator.languages)
	{
		if (langId == languageId)
		{
			Dutranslator.current = languageId;

              if(languageId == Dutranslator.settings.originalLanguageId) return 0;  // Default language, no translation

            // Parse process

            var fPath = Dutranslator.languages[langId]["file"];
            var file = new File(fPath);
            
            if(!file.open("r")) return 1; // Unable to open the file

            var data = file.read();
            file.close();
            var jsonData = JSON.parse(data);            
            
            if(!jsonData[Dutranslator.settings.name] || 
                jsonData[Dutranslator.settings.name].length != 2 ||
                !jsonData[Dutranslator.settings.name][1]["translations"]) return 2; // Wrong json format
            
            var translations = jsonData[Dutranslator.settings.name][1]["translations"];                    
            Dutranslator.localizedStrings = translations;
            
            return 0;

		}
	}
}

/**
 * Set the current language with a given pretty name
 * @param {string} languageName - The pretty name of the language to set
 * @return success code
 * 0    Everything went ok
 * -1   Can't find any language with the given pretty name
 * >0  Call to setLanguage(languageId) failed
 */
Dutranslator.setPrettyLanguage = function (languageName) {
    
    var langId = Dutranslator.getLanguageId(languageName);
    if(langId == 1) return -1;
    
    return Dutranslator.setLanguage(langId);
}    
    
/**
 * Translate a given string based on the current seted language
 *
 * @param {string} s - 		The text to be translated
 * @param {int} context - 	An integer to be passed to the translated text, used to differenciate different translated texts which have the same original text (context), default is 0
 * 							If something wrong is passed, context will be initialized to -1 (which means, don't check for a specific translation)
 * @param {string array} args -	Args to format into the translated string, default is []
 *								For example, when calling tr("Welcome {#}", -1, "Paul"), the output will be "Welcome Paul"
 *								If too many args are given, there are ignored
 *								If not enough args are give, the {#} are replaced with ?
 * @return {string} The translated text or s if nothing is set or available
 */
function tr(s, context, args) {
	// Default args
	if(typeof(context)==='undefined' || context === parseInt(context, 10)) context = -1;
	if(typeof(args)==='undefined') args = [];
	if(typeof(args) === 'string' || args instanceof String) args = [args];

	var languageNumber = -1;

	var res = s;
	// If a language is set, search for the translation
	if (Dutranslator.current != Dutranslator.settings.originalLanguageId){
		var stringNumber = -1;      

		// Get the translation
		for (var i = 0 ; i < Dutranslator.localizedStrings.length ; i++)
		{
             var tr = Dutranslator.localizedStrings[i];
             if(tr["source"] == s)
             {
				// Check context
				if (context > -1) {
					if (tr["contextId"] == context) {
						stringNumber =i;
						break;
					}
				}
				else {
					stringNumber =i;
					break;
				}
			}
		}
    
		// If a translation is found, set it to res
		if (stringNumber > -1) res = Dutranslator.localizedStrings[stringNumber]["translation"];
		if (res == "") res = s;
	}



	// Args process
	while(res.indexOf("{#}") !== -1){ // While there is stuff to format
		if(args.length < 1){ // If no more args, replace with ?
			res = res.replace("{#}", "?"); // Will replace the first occurence
		}else{
			var arg = args.shift(); // Take the first arg and remove it
			res = res.replace("{#}", arg);
		}
	}

	return res;
}
