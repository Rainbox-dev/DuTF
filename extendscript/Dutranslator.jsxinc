/*


Duik

copyright

blabla credits

blabla licence
*/


//gets the JSON Parser
#include json2.jsxinc

/*
Here's how to use it:

JSON.stringify(value, replacer, space)

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.
	
JSON.parse = function (text, reviver)

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

*/

/**
 * The Javascript translator part of the Dutranslator Framework
 * @class Dutranslator
 */
var Dutranslator = {};

/**
 * The current language id (fr, en, ..)
 * @memberof Dutranslator
 */
Dutranslator.current = '';

/** 
 * The list of availables languages 
 * 
 * Will be filled when executing Dutranslator.getAvailable
 *
 * When adding a language to this list, the translations should
 * be added right after in Dutranslator.localizedStrings to
 * be sure that everything related to a language is available at
 * the same index
 * @memberof Dutranslator
 */
Dutranslator.languages = [];

/**
 * The translated strings  of the current language
 * 
 * An array of compounds containing the source, the translation and the context
 *
 * @memberof Dutranslator
 */
Dutranslator.localizedStrings = [];

/**
 * Some settings for the translator
 * @class Settings
 * @memberof Dutranslator
 */
Dutranslator.settings = {}

/**
 * {string} The folder containing the translation files
 * Default: this translator path
 * @memberof Settings
 * 
 */
Dutranslator.settings.folder = File($.fileName).path + "/";

/**
 * {string} The prefix in the translation filenames
 * Default: this translator filename + "_"
 * @memberof Settings
 */
Dutranslator.settings.prefix = File($.fileName).name.substring(0,File($.fileName).name.lastIndexOf('.')) + "_";

/**
 * {string} The suffix (including file extension) in the translation filenames
 * Default: ".json"
 * @memberof Settings
 */
Dutranslator.settings.suffix = ".json";

/**
 * {string} The application name (root of the json translations)
 * Default: "duik"
 * @memberof Settings
 */
Dutranslator.settings.name = "duik";

/**
 * The original languageId
 * @memberof Settings
 */
Dutranslator.settings.originalLanguageId = "en";

/**
 * Parse the translation files.
 */
Dutranslator.getAvailable = function ()
{
	//Add original language
    Dutranslator.languages.push(Dutranslator.settings.originalLanguageId);
    
    var folder = new Folder(Dutranslator.settings.folder);
     
	// Get the list of translations 
	languageFiles = folder.getFiles(Dutranslator.settings.prefix + '*' + Dutranslator.settings.suffix);
	for (var i = 0 ; i < languageFiles.length ; i++)
	{  
          var fileName = languageFiles[i].name;
          
          Dutranslator.languages.push(fileName
            .replace(Dutranslator.settings.prefix, "")
            .replace(Dutranslator.settings.suffix, ""));         
	}
}

/**
 * Set the current language
 * @param {string} languageId - The id of the language to set
 */
Dutranslator.setLanguage = function (languageId) {
	
	// TODO Parse the translation file corresponding to the id
	
	for (var i = 0 ; i < Dutranslator.languages.length ; i++)
	{
		if (Dutranslator.languages[i] == languageId)
		{
			Dutranslator.current = languageId;
            
              if(languageId == Dutranslator.settings.originalLanguageId) return; 

            // Parse process
            
            var fPath = Dutranslator.settings.folder + Dutranslator.settings.prefix + languageId + Dutranslator.settings.suffix;
            var file = new File(fPath);
            
            if(!file.open("r")) return; // Unable to open the file
            
            var data = file.read();
            file.close();
            var jsonData = JSON.parse(data);            

            var translations = jsonData[Dutranslator.settings.name]["translations"];           
            Dutranslator.localizedStrings = translations;
            
            return;
            
		}
	}
}

/**
 * Translate a given string based on the current seted language
 *
 * @param {string} s - 		The text to be translated
 * @param {int} context - 	An integer to be passed to the translated text, used to differenciate different translated texts which have the same original text (context), default is 0
 * 							If something wrong is passed, context will be initialized to -1 (which means, don't check for a specific translation)
 * @param {string array} args -	Args to format into the translated string, default is []
 *								For example, when calling tr("Welcome {#}", -1, "Paul"), the output will be "Welcome Paul"
 *								If too many args are given, there are ignored
 *								If not enough args are give, the {#} are replaced with ?
 * @return {string} The translated text or s if nothing is set or available
 */
function tr(s, context, args) {
	// Default args
	if(typeof(context)==='undefined' || context === parseInt(context, 10)) context = -1;
	if(typeof(args)==='undefined') args = [];
	if(typeof(args) === 'string' || args instanceof String) args = [args];
	
	// TODO re-implement using the new json translation files instead of the array from jsxinc files
		
	var languageNumber = -1;
	
	// Get the current language index
	for (var i = 0 ; i < Dutranslator.languages.length ; i++)
	{
		if (Dutranslator.languages[i] == Dutranslator.current)
		{
			languageNumber =i;
			break;
		}
	}
	
	var res = s;
	// If a language is set, search for the translation
	if (languageNumber > -1 &&  Dutranslator.current != Dutranslator.settings.originalLanguageId){
		var stringNumber = -1;
		
		// Get the translation
		for (var i = 0 ; i < Dutranslator.localizedStrings.length ; i++)
		{
             var tr = Dutranslator.localizedStrings[i];
             if(tr["source"] == s)
             {			
				// Check context
				if (context > -1) { 
					if (tr["contextId"] == context) {
						stringNumber =i;
						break;
					}
				}
				else {
					stringNumber =i;
					break;
				}
			}
		}

		// If a translation is found, set it to res
		if (stringNumber > -1) res = Dutranslator.localizedStrings[stringNumber]["translation"];
		if (res == "") res = s; 
	}

	
	
	// Args process
	while(res.indexOf("{#}") !== -1){ // While there is stuff to format
		if(args.length < 1){ // If no more args, replace with ?
			res = res.replace("{#}", "?"); // Will replace the first occurence
		}else{
			var arg = args.shift(); // Take the first arg and remove it
			res = res.replace("{#}", arg);
		}
	}
		
	return res;
}